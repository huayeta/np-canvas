<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>画曲线</title>
    <style>
        *{
            margin: 0;
            padding: 0;
        }
        body,html{
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="1200" height="900"></canvas>
</body>
</html>
<script src="/index.js" charset="utf-8"></script>
<script type="text/javascript">
    var canvas=new npCanvas('canvas',{
        is_drage:false
    });
    var Text=new npCanvas.Text({
        x:0,
        y:0,
        text:''
    },{
        backgroundColor:'rgba(0,0,0,.6)',
        padding:10,
        fill:'#fff'
    });
    // [东经，北纬]
    var nodes=[{name:'beijing',local:'北京'},{name:'shanghai',local:'上海'}];
    var links=[{srcnode:'beijing',dstnode:'shanghai'}];
    // /webajax/link/node-local name,longitude,latitude nodes[0][name]
    // $.get('/webajax/link/topology').done(function(res){
    //    if(res.status!=0)return alert('请求节点错误');
    // var nodes=chart_data.nodes;
    // var links=chart_data.links;
    var nodes_obj={};
    nodes.map(function(node){
        node.x=node.x || parseInt(Math.random()*canvas.canvasPos.width);
        node.y=node.y || parseInt(Math.random()*canvas.canvasPos.height);
        nodes_obj[node.name]=node;
    })
    // 绘制link
    Object.keys(links).forEach(function(key) {
        var link=links[key];
        createLike(link);
    })
    // 绘制node
    Object.keys(nodes_obj).forEach(function(name){
        var node=nodes_obj[name];
        createNode(node);
    })
    function createNode(opts){
        var x=opts.x;
        var y=opts.y;
        var Node=new npCanvas.Circle({
            x:x,
            y:y,
            r:4
        },{
            fill:'rgba(0, 33, 66 , 1)',
            is_drage:true
        });
        Node.on('shape:mouseover',function(event){
            Text.x=event.mouse.x+10;
            Text.y=event.mouse.y;
            Text.text='name:'+opts.name+'\nlocal:'+opts.local;
            if((Text.y+Text.height+10*2)>canvas.canvasPos.height){
                Text.y=canvas.canvasPos.height-(Text.height+10*2);
            }
            if((Text.x+Text.width+10*2)>canvas.canvasPos.width){
                Text.x=canvas.canvasPos.width-(Text.width+10*2);
            }
            canvas.add(Text);
            canvas.renderAll();
            // console.log(canvas.canvasList.length);
        }).on('shape:mouseleave',function(event){
            canvas.remove(Text);
            canvas.renderAll();
        }).on('shape:move',function(event){
            nodes_obj[opts.name].links.forEach(function(link){
                if(link.data.srcnode===opts.name){
                    link.x1=event.mouse.x;
                    link.y1=event.mouse.y;
                }else{
                    link.x2=event.mouse.x;
                    link.y2=event.mouse.y;
                }
            })
            nodes_obj[opts.name].text.x=event.mouse.x+10;
            nodes_obj[opts.name].text.y=event.mouse.y+5;
            canvas.renderAll();
        })
        Node.data=opts;
        Node.links=[];
        nodes_obj[opts.name]['node']=Node;
        canvas.add(Node);
        var Node_name=new npCanvas.Text({
            x:opts.x+10,
            y:opts.y+5,
            text:opts.name
        })
        canvas.add(Node_name);
        nodes_obj[opts.name]['text']=Node_name;
        canvas.renderAll();
        // console.log(Circle.id);
    }
    function createLike(opts){
        var srcnode=nodes_obj[opts.srcnode];
        var dstnode=nodes_obj[opts.dstnode];
        // console.log(opts);
        var color='#ddd';
        if(opts.state=='down')color='red';
        var Link=new npCanvas.Line({
            x1:srcnode.x,
            y1:srcnode.y,
            x2:dstnode.x,
            y2:dstnode.y
        },{
            strokeWidth:1,
            stroke:color
        });
        Link.on('shape:mouseover',function(event){
            Text.x=event.mouse.x+10;
            Text.y=event.mouse.y;
            Text.text='srcnode:'+opts.srcnode+'\ndstnode:'+opts.dstnode;
            canvas.add(Text);
            canvas.renderAll();
            // console.log(canvas.canvasList.length);
        }).on('shape:mouseleave',function(event){
            canvas.remove(Text);
            canvas.renderAll();
        })
        // 保存link
        if(!nodes_obj[srcnode.name]['links'])nodes_obj[srcnode.name]['links']=[];
        nodes_obj[srcnode.name]['links'].push(Link);
        if(!nodes_obj[dstnode.name]['links'])nodes_obj[dstnode.name]['links']=[];
        nodes_obj[dstnode.name]['links'].push(Link);
        Link.data=opts;
        canvas.add(Link);
        canvas.renderAll();
    }
</script>
